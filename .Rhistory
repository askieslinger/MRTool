ggplot(data = mr_res_snp1,
aes(x = G_X, color = factor(G_X))) +
geom_abline(slope = 1, intercept = 0) +
geom_line(aes(y = adjRsquared_G_X)) +
geom_point(aes(y = adjRsquared_G_X)) +
labs(
title = 'Beobachtete erklärte Varianz GX vs vorgegebene',
color = 'Instrumenten-\nstärke',
y = 'GX real',
x = 'GX vorgegeben'
)
ggplot(data = mr_res_snp1,
aes(assigned.effect_X_Y,
`Std Error`,
color = factor(G_X))) +
geom_line() +
geom_point() +
labs(title = 'SE of MR estimate rel to beta_X_Y',
color = 'Instrumenten-\nstärke')
# aus dem Set genedata korrelierte SNPs raussuchen
snp_cors <- MRTool::get_corrs(genedata)
snp_cors[cor=='lowest']
snp_cors[cor_val,cor=='lowest']
snp_cors[cor=='lowest',cor_val]
snp_cors[cor=='lowest',round(cor_val)]
snp_cors[cor=='lowest',round(cor_val,digits=2)]
# aus dem Set genedata korrelierte SNPs raussuchen
snp_cors <- MRTool::get_corrs(genedata)
snp_cors
snp_cors[cor=='lowest']
#TODO Richtung der MR, reverse=FALSE für kausale Richtung, reverse=TRUE für antikausale Richtung
rev = FALSE
#TODO
pves <- list(
# list of snps, each pos in vector is one scenario
G_X = list(c(0.2, 0.005, 0.2, 0.005), c(0, 0, 0, 0)),
G_Y = list(c(0, 0, 0, 0), c(0.2, 0.005, 0.005, 0.2)),
G_U = list(c(0, 0, 0, 0), c(0, 0, 0, 0)),
X_Y =  c(0, 0.045, 0.295),
U_X = c(0),
U_Y = c(0)
)
# für jede Korrelationsstufe
t <- lapply(snp_cors[, cor], function(cor_scen) {
SNP <- snp_cors[cor == cor_scen, .(snp1, snp2)]
SNP <- unlist(SNP)
mafs <- mafs[order(names(mafs))]
SNP <- SNP[order(SNP)]
#TODO
iterations = 10
# alle snp daten müssen zwei Spalten Identifier haben
SNP_data =  cbind(genedata[, 1:2, with = F], genedata[, ..SNP])
maf <- mafs[SNP]
# calculate the simulation coefficients from explained variance
l <- MRTool::cal_betas(pves, maf)
# parameters for simulation
params <- l[[1]]
#TODO falls negative Betakoeffizienten genutzt werden sollen
#params[,U_Y:=-U_Y]
#params[,U_X:=-U_X]
# grid of explained variances after calculation of coefficients,
# pves maybe needed adjustment if impossible
pve_grid <- l[[2]]
params
# remember the true IVs for X and Y respectively
xsnp = paste0('`', SNP[1], '`')
ysnp = paste0('`', SNP[2], '`')
# simulate and MR in parallel for number of iterations
results <-
parallel::mclapply(
1:iterations,
FUN = function(i)
MRTool::sim_and_mr(SNP_data, SNP,  params, reverse = rev),
#TODO
mc.cores = 1
)
transformed = MRTool::transform_results(
results = results,
SNP = SNP,
iterations = iterations,
pve_grid = pve_grid
)
res_list = transformed$res_list
# SNP Kategorie hinzufügen: Quelle für X oder Y
lapply(res_list, function(x)
x[, snp_type := ifelse(unique(snp) == xsnp, 'xsnp', 'ysnp')])
# return
data.table::rbindlist(lapply(res_list, function(x) {
test <- split(x, by = 'snp_id')
total_res_3 <- test[[xsnp]][test[[ysnp]], on = 'Scenario']
}), use.names = T)
})
#Verarbeitung für Plotting --------------------------------------------------
names(t) <- snp_cors[, cor]
res <- data.table::rbindlist(t, use.names = T, idcol = 'corr_scen')
res[, corr_scen := factor(
corr_scen,
levels = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
ordered = T
)]
lr_est = ''
if (rev) {
res[, caus_eff := estimate_Y_X]
lr_est = 'Lineare Regression YX'
} else{
res[, caus_eff := estimate_X_Y]
lr_est = 'Lineare Regression XY'
}
res_2 <- split(res, by = 'snp_type')
ggplot(data = res_2$xsnp, aes(x = assigned.effect_X_Y,
color = corr_scen)) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) +
geom_line(aes(y = Estimate, linetype = 'Kausalschätzer der MR')) +
geom_point(aes(y = Estimate, shape = 'Kausalschätzer der MR'), size =
3) +
geom_line(aes(y = caus_eff, linetype = lr_est)) +
geom_point(aes(y = caus_eff, shape = lr_est), size = 3) +
scale_shape_manual(values = c(1, 3, 5), name = 'Y') +
scale_linetype(name = 'Y') +
scale_color_discrete(
breaks = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
labels = paste0(paste0(paste0(
c(
'negativ hoch',
'negativ niedrig',
'am niedrigsten',
'positiv niedrig',
'positiv hoch'
)
), ' ~ '),
c(-0.3,-0.1, snp_cors[cor=='lowest',round(cor_val,digits=2)], 0.1, 0.3))
) +
facet_grid(i.G_Y ~ G_X, labeller = label_both) +
labs(
title = 'MR-Estimate relative to X_Y with confounders',
color = 'Korrelationsszenario ',
caption = paste0('IV: xsnp \nreverse: ', ifelse(rev, yes = 'yes', no =
'no')),
x = 'Betakoeffizient XY',
y = 'Kausalschätzer'
)+
theme(legend.position='bottom')
ggplot(data = res_2$ysnp,
aes(x = assigned.effect_X_Y,
color = corr_scen)) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) +
geom_line(aes(y = Estimate,
linetype = 'Kausalschätzer der MR')) +
geom_point(aes(y = Estimate,
shape = 'Kausalschätzer der MR'),
size = 3) +
geom_line(aes(y = caus_eff,
linetype = lr_est)) +
geom_point(aes(y = caus_eff,
shape = lr_est),
size = 3) +
scale_shape_manual(values = c(1, 3, 5),
name = 'Y') +
scale_linetype(name = 'Y') +
scale_color_discrete(
breaks = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
labels = paste0(paste0(paste0(
c(
'negativ hoch',
'negativ niedrig',
'am niedrigsten',
'positiv niedrig',
'positiv hoch'
)
), ' ~ '),
c(-0.3,-0.1, snp_cors[cor=='lowest',round(cor_val,digits=2)], 0.1, 0.3))
) +
facet_grid(i.G_Y ~ G_X,
labeller = label_both) +
labs(
title = 'MR-Estimate relative to X_Y with confounders',
color = 'Korrelationsszenario',
caption = paste0('IV: ysnp \nreverse: ', ifelse(rev, yes = 'yes', no =
'no')),
x = 'Betakoeffizient XY',
y = 'Kausalschätzer'
)+
theme(legend.position='bottom')
build_vignettes()
build_vignettes()
build_vignettes()
# aus dem Set genedata korrelierte SNPs raussuchen
snp_cors <- MRTool::get_corrs(genedata)
snp_cors
snp_cors[cor=='lowest']
#TODO Richtung der MR, reverse=FALSE für kausale Richtung, reverse=TRUE für antikausale Richtung
rev = FALSE
#TODO
pves <- list(
# list of snps, each pos in vector is one scenario
G_X = list(c(0.2, 0.005, 0.2, 0.005), c(0, 0, 0, 0)),
G_Y = list(c(0, 0, 0, 0), c(0.2, 0.005, 0.005, 0.2)),
G_U = list(c(0, 0, 0, 0), c(0, 0, 0, 0)),
X_Y =  c(0, 0.045, 0.295),
U_X = c(0),
U_Y = c(0)
)
# für jede Korrelationsstufe
t <- lapply(snp_cors[, cor], function(cor_scen) {
SNP <- snp_cors[cor == cor_scen, .(snp1, snp2)]
SNP <- unlist(SNP)
mafs <- mafs[order(names(mafs))]
SNP <- SNP[order(SNP)]
#TODO
iterations = 10
# alle snp daten müssen zwei Spalten Identifier haben
SNP_data =  cbind(genedata[, 1:2, with = F], genedata[, ..SNP])
maf <- mafs[SNP]
# calculate the simulation coefficients from explained variance
l <- MRTool::cal_betas(pves, maf)
# parameters for simulation
params <- l[[1]]
#TODO falls negative Betakoeffizienten genutzt werden sollen
#params[,U_Y:=-U_Y]
#params[,U_X:=-U_X]
# grid of explained variances after calculation of coefficients,
# pves maybe needed adjustment if impossible
pve_grid <- l[[2]]
params
# remember the true IVs for X and Y respectively
xsnp = paste0('`', SNP[1], '`')
ysnp = paste0('`', SNP[2], '`')
# simulate and MR in parallel for number of iterations
results <-
parallel::mclapply(
1:iterations,
FUN = function(i)
MRTool::sim_and_mr(SNP_data, SNP,  params, reverse = rev),
#TODO
mc.cores = 1
)
transformed = MRTool::transform_results(
results = results,
SNP = SNP,
iterations = iterations,
pve_grid = pve_grid
)
res_list = transformed$res_list
# SNP Kategorie hinzufügen: Quelle für X oder Y
lapply(res_list, function(x)
x[, snp_type := ifelse(unique(snp) == xsnp, 'xsnp', 'ysnp')])
# return
data.table::rbindlist(lapply(res_list, function(x) {
test <- split(x, by = 'snp_id')
total_res_3 <- test[[xsnp]][test[[ysnp]], on = 'Scenario']
}), use.names = T)
})
#Verarbeitung für Plotting --------------------------------------------------
names(t) <- snp_cors[, cor]
res <- data.table::rbindlist(t, use.names = T, idcol = 'corr_scen')
res[, corr_scen := factor(
corr_scen,
levels = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
ordered = T
)]
lr_est = ''
if (rev) {
res[, caus_eff := estimate_Y_X]
lr_est = 'Lineare Regression YX'
} else{
res[, caus_eff := estimate_X_Y]
lr_est = 'Lineare Regression XY'
}
res_2 <- split(res, by = 'snp_type')
ggplot(data = res_2$xsnp, aes(x = assigned.effect_X_Y,
color = corr_scen)) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) +
geom_line(aes(y = Estimate, linetype = 'Kausalschätzer der MR')) +
geom_point(aes(y = Estimate, shape = 'Kausalschätzer der MR'), size =
3) +
geom_line(aes(y = caus_eff, linetype = lr_est)) +
geom_point(aes(y = caus_eff, shape = lr_est), size = 3) +
scale_shape_manual(values = c(1, 3, 5), name = 'Y') +
scale_linetype(name = 'Y') +
scale_color_discrete(
breaks = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
labels = paste0(paste0(paste0(
c(
'negativ hoch',
'negativ niedrig',
'am niedrigsten',
'positiv niedrig',
'positiv hoch'
)
), ' ~ '),
c(-0.3,-0.1, snp_cors[cor=='lowest',round(cor_val,digits=2)], 0.1, 0.3))
) +
facet_grid(i.G_Y ~ G_X, labeller = label_both) +
labs(
title = 'MR-Estimate relative to X_Y with confounders',
color = 'Korrelationsszenario ',
caption = paste0('IV: xsnp \nreverse: ', ifelse(rev, yes = 'yes', no =
'no')),
x = 'Betakoeffizient XY',
y = 'Kausalschätzer'
)
ggplot(data = res_2$ysnp,
aes(x = assigned.effect_X_Y,
color = corr_scen)) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) +
geom_line(aes(y = Estimate,
linetype = 'Kausalschätzer der MR')) +
geom_point(aes(y = Estimate,
shape = 'Kausalschätzer der MR'),
size = 3) +
geom_line(aes(y = caus_eff,
linetype = lr_est)) +
geom_point(aes(y = caus_eff,
shape = lr_est),
size = 3) +
scale_shape_manual(values = c(1, 3, 5),
name = 'Y') +
scale_linetype(name = 'Y') +
scale_color_discrete(
breaks = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
labels = paste0(paste0(paste0(
c(
'negativ hoch',
'negativ niedrig',
'am niedrigsten',
'positiv niedrig',
'positiv hoch'
)
), ' ~ '),
c(-0.3,-0.1, snp_cors[cor=='lowest',round(cor_val,digits=2)], 0.1, 0.3))
) +
facet_grid(i.G_Y ~ G_X,
labeller = label_both) +
labs(
title = 'MR-Estimate relative to X_Y with confounders',
color = 'Korrelationsszenario',
caption = paste0('IV: ysnp \nreverse: ', ifelse(rev, yes = 'yes', no =
'no')),
x = 'Betakoeffizient XY',
y = 'Kausalschätzer'
)
# aus dem Set genedata korrelierte SNPs raussuchen
snp_cors <- MRTool::get_corrs(genedata)
snp_cors
snp_cors[cor=='lowest']
#TODO Richtung der MR, reverse=FALSE für kausale Richtung, reverse=TRUE für antikausale Richtung
rev = FALSE
#TODO
pves <- list(
# list of snps, each pos in vector is one scenario
G_X = list(c(0.2, 0.005, 0.2, 0.005), c(0, 0, 0, 0)),
G_Y = list(c(0, 0, 0, 0), c(0.2, 0.005, 0.005, 0.2)),
G_U = list(c(0, 0, 0, 0), c(0, 0, 0, 0)),
X_Y =  c(0, 0.045, 0.295),
U_X = c(0),
U_Y = c(0)
)
# für jede Korrelationsstufe
t <- lapply(snp_cors[, cor], function(cor_scen) {
SNP <- snp_cors[cor == cor_scen, .(snp1, snp2)]
SNP <- unlist(SNP)
mafs <- mafs[order(names(mafs))]
SNP <- SNP[order(SNP)]
#TODO
iterations = 10
# alle snp daten müssen zwei Spalten Identifier haben
SNP_data =  cbind(genedata[, 1:2, with = F], genedata[, ..SNP])
maf <- mafs[SNP]
# calculate the simulation coefficients from explained variance
l <- MRTool::cal_betas(pves, maf)
# parameters for simulation
params <- l[[1]]
#TODO falls negative Betakoeffizienten genutzt werden sollen
#params[,U_Y:=-U_Y]
#params[,U_X:=-U_X]
# grid of explained variances after calculation of coefficients,
# pves maybe needed adjustment if impossible
pve_grid <- l[[2]]
params
# remember the true IVs for X and Y respectively
xsnp = paste0('`', SNP[1], '`')
ysnp = paste0('`', SNP[2], '`')
# simulate and MR in parallel for number of iterations
results <-
parallel::mclapply(
1:iterations,
FUN = function(i)
MRTool::sim_and_mr(SNP_data, SNP,  params, reverse = rev),
#TODO
mc.cores = 1
)
transformed = MRTool::transform_results(
results = results,
SNP = SNP,
iterations = iterations,
pve_grid = pve_grid
)
res_list = transformed$res_list
# SNP Kategorie hinzufügen: Quelle für X oder Y
lapply(res_list, function(x)
x[, snp_type := ifelse(unique(snp) == xsnp, 'xsnp', 'ysnp')])
# return
data.table::rbindlist(lapply(res_list, function(x) {
test <- split(x, by = 'snp_id')
total_res_3 <- test[[xsnp]][test[[ysnp]], on = 'Scenario']
}), use.names = T)
})
#Verarbeitung für Plotting --------------------------------------------------
names(t) <- snp_cors[, cor]
res <- data.table::rbindlist(t, use.names = T, idcol = 'corr_scen')
res[, corr_scen := factor(
corr_scen,
levels = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
ordered = T
)]
lr_est = ''
if (rev) {
res[, caus_eff := estimate_Y_X]
lr_est = 'Lineare Regression YX'
} else{
res[, caus_eff := estimate_X_Y]
lr_est = 'Lineare Regression XY'
}
res_2 <- split(res, by = 'snp_type')
ggplot(data = res_2$xsnp, aes(x = assigned.effect_X_Y,
color = corr_scen)) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) +
geom_line(aes(y = Estimate, linetype = 'Kausalschätzer der MR')) +
geom_point(aes(y = Estimate, shape = 'Kausalschätzer der MR'), size =
3) +
geom_line(aes(y = caus_eff, linetype = lr_est)) +
geom_point(aes(y = caus_eff, shape = lr_est), size = 3) +
scale_shape_manual(values = c(1, 3, 5), name = 'Y') +
scale_linetype(name = 'Y') +
scale_color_discrete(
breaks = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
labels = paste0(paste0(paste0(
c(
'negativ hoch',
'negativ niedrig',
'am niedrigsten',
'positiv niedrig',
'positiv hoch'
)
), ' ~ '),
c(-0.3,-0.1, snp_cors[cor=='lowest',round(cor_val,digits=2)], 0.1, 0.3))
) +
facet_grid(i.G_Y ~ G_X, labeller = label_both) +
labs(
title = 'MR-Estimate relative to X_Y with confounders',
color = 'Korrelationsszenario ',
caption = paste0('IV: xsnp \nreverse: ', ifelse(rev, yes = 'yes', no =
'no')),
x = 'Betakoeffizient XY',
y = 'Kausalschätzer'
)+
theme(legend.position='bottom',legend.box='vertical')
ggplot(data = res_2$ysnp,
aes(x = assigned.effect_X_Y,
color = corr_scen)) +
geom_abline(slope = 1, intercept = 0) +
geom_hline(yintercept = 0) +
geom_line(aes(y = Estimate,
linetype = 'Kausalschätzer der MR')) +
geom_point(aes(y = Estimate,
shape = 'Kausalschätzer der MR'),
size = 3) +
geom_line(aes(y = caus_eff,
linetype = lr_est)) +
geom_point(aes(y = caus_eff,
shape = lr_est),
size = 3) +
scale_shape_manual(values = c(1, 3, 5),
name = 'Y') +
scale_linetype(name = 'Y') +
scale_color_discrete(
breaks = c('neg_high', 'neg_low', 'lowest', 'pos_low', 'pos_high'),
labels = paste0(paste0(paste0(
c(
'negativ hoch',
'negativ niedrig',
'am niedrigsten',
'positiv niedrig',
'positiv hoch'
)
), ' ~ '),
c(-0.3,-0.1, snp_cors[cor=='lowest',round(cor_val,digits=2)], 0.1, 0.3))
) +
facet_grid(i.G_Y ~ G_X,
labeller = label_both) +
labs(
title = 'MR-Estimate relative to X_Y with confounders',
color = 'Korrelationsszenario',
caption = paste0('IV: ysnp \nreverse: ', ifelse(rev, yes = 'yes', no =
'no')),
x = 'Betakoeffizient XY',
y = 'Kausalschätzer'
)+
theme(legend.position='bottom',legend.box='vertical')
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build()
